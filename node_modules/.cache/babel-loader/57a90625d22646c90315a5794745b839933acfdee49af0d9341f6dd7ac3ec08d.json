{"ast":null,"code":"// import { useState, useEffect } from \"react\";\n// import { useLocalStorageState } from \"../hooks/useLocalStorageState\";\n// import { useBooks } from \"../hooks/useBooks\";\n// import { useDebounce } from \"../hooks/useDebounce\";\n// import Search from \"../components/Search\";\n// import BookList from \"../components/BookList\";\n// // import BookOverlay from \"../components/BookOverlay\";\n// import Loader from \"../components/Loader\";\n// import ErrorMessage from \"../components/ErrorMessage\";\n\n// export default function Home() {\n//   const [query, setQuery] = useState(\"\");\n//   const [selectedId, setSelectedId] = useState(null);\n//   const debouncedQuery = useDebounce(query, 500);\n//   const { books, isLoading, error } = useBooks(debouncedQuery);\n//   const [read, setRead] = useLocalStorageState([], \"read\");\n//   const [recommendedBooks, setRecommendedBooks] = useState([]);\n\n//   useEffect(() => {\n//     async function fetchRecommendedBooks() {\n//       try {\n//         const res = await fetch(\n//           \"https://www.googleapis.com/books/v1/volumes?q=subject:fiction\"\n//         );\n//         const data = await res.json();\n//         setRecommendedBooks(data.items || []);\n//       } catch (err) {\n//         console.error(\"Failed to fetch recommended books:\", err);\n//       }\n//     }\n//     fetchRecommendedBooks();\n//   }, []);\n\n//   function handleSelectBook(id) {\n//     setSelectedId((selectedId) => (id === selectedId ? null : id));\n//   }\n\n//   function handleCloseBook() {\n//     setSelectedId(null);\n//   }\n//   function handleAddRead(book) {\n//     setRead((prevRead) => {\n//       // Check if the book already exists in the read list\n//       if (prevRead.some((b) => b.id === book.id)) {\n//         return prevRead;\n//       }\n//       const updatedRead = [...prevRead, book];\n//       localStorage.setItem(\"read\", JSON.stringify(updatedRead));\n//       return updatedRead;\n//     });\n//   }\n\n//   function handleDeleteRead(id) {\n//     setRead((read) => read.filter((book) => book.id !== id));\n//   }\n\n//   useEffect(() => {\n//     const storedRead = JSON.parse(localStorage.getItem(\"read\")) || [];\n//     setRead(storedRead);\n//   }, []);\n\n//   return (\n//     <div className=\"min-h-screen bg-gray-100 p-4\">\n//       <Search query={query} setQuery={setQuery} />\n//       <NumResults books={books} />\n//       <Main>\n//         <Box>\n//           {isLoading && <Loader />}\n//           {!isLoading && !error && (\n//             <>\n//               {books.length === 0 && query === \"\" ? (\n//                 <BookList\n//                   books={recommendedBooks}\n//                   onSelectBook={handleSelectBook}\n//                 />\n//               ) : (\n//                 <BookList books={books} onSelectBook={handleSelectBook} />\n//               )}\n//             </>\n//           )}\n//           {error && <ErrorMessage message={error} />}\n//         </Box>\n//         {selectedId && (\n//           <BookOverlay\n//             selectedId={selectedId}\n//             onCloseBook={handleCloseBook}\n//             onAddRead={handleAddRead}\n//             read={read}\n//           />\n//         )}\n//       </Main>\n//     </div>\n//   );\n// }\n\n// function NumResults({ books }) {\n//   return (\n//     <p className=\"mb-4 text-lg\">\n//       Found <strong>{books.length}</strong> results\n//     </p>\n//   );\n// }\n\n// function Main({ children }) {\n//   return <main className=\"bg-white p-4 rounded shadow-lg\">{children}</main>;\n// }\n\n// function Box({ children }) {\n//   const [isOpen, setIsOpen] = useState(true);\n\n//   return (\n//     <div className=\"mb-4\">\n//       <button\n//         className=\"mb-2 text-xl text-blue-600 focus:outline-none\"\n//         onClick={() => setIsOpen((open) => !open)}\n//       >\n//         {isOpen ? \"–\" : \"+\"}\n//       </button>\n//       {isOpen && children}\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["D:/Projects/React projects (beginners)/personalisedmoviereviews/src/pages/Home.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\r\n// import { useLocalStorageState } from \"../hooks/useLocalStorageState\";\r\n// import { useBooks } from \"../hooks/useBooks\";\r\n// import { useDebounce } from \"../hooks/useDebounce\";\r\n// import Search from \"../components/Search\";\r\n// import BookList from \"../components/BookList\";\r\n// // import BookOverlay from \"../components/BookOverlay\";\r\n// import Loader from \"../components/Loader\";\r\n// import ErrorMessage from \"../components/ErrorMessage\";\r\n\r\n// export default function Home() {\r\n//   const [query, setQuery] = useState(\"\");\r\n//   const [selectedId, setSelectedId] = useState(null);\r\n//   const debouncedQuery = useDebounce(query, 500);\r\n//   const { books, isLoading, error } = useBooks(debouncedQuery);\r\n//   const [read, setRead] = useLocalStorageState([], \"read\");\r\n//   const [recommendedBooks, setRecommendedBooks] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     async function fetchRecommendedBooks() {\r\n//       try {\r\n//         const res = await fetch(\r\n//           \"https://www.googleapis.com/books/v1/volumes?q=subject:fiction\"\r\n//         );\r\n//         const data = await res.json();\r\n//         setRecommendedBooks(data.items || []);\r\n//       } catch (err) {\r\n//         console.error(\"Failed to fetch recommended books:\", err);\r\n//       }\r\n//     }\r\n//     fetchRecommendedBooks();\r\n//   }, []);\r\n\r\n//   function handleSelectBook(id) {\r\n//     setSelectedId((selectedId) => (id === selectedId ? null : id));\r\n//   }\r\n\r\n//   function handleCloseBook() {\r\n//     setSelectedId(null);\r\n//   }\r\n//   function handleAddRead(book) {\r\n//     setRead((prevRead) => {\r\n//       // Check if the book already exists in the read list\r\n//       if (prevRead.some((b) => b.id === book.id)) {\r\n//         return prevRead;\r\n//       }\r\n//       const updatedRead = [...prevRead, book];\r\n//       localStorage.setItem(\"read\", JSON.stringify(updatedRead));\r\n//       return updatedRead;\r\n//     });\r\n//   }\r\n\r\n//   function handleDeleteRead(id) {\r\n//     setRead((read) => read.filter((book) => book.id !== id));\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     const storedRead = JSON.parse(localStorage.getItem(\"read\")) || [];\r\n//     setRead(storedRead);\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"min-h-screen bg-gray-100 p-4\">\r\n//       <Search query={query} setQuery={setQuery} />\r\n//       <NumResults books={books} />\r\n//       <Main>\r\n//         <Box>\r\n//           {isLoading && <Loader />}\r\n//           {!isLoading && !error && (\r\n//             <>\r\n//               {books.length === 0 && query === \"\" ? (\r\n//                 <BookList\r\n//                   books={recommendedBooks}\r\n//                   onSelectBook={handleSelectBook}\r\n//                 />\r\n//               ) : (\r\n//                 <BookList books={books} onSelectBook={handleSelectBook} />\r\n//               )}\r\n//             </>\r\n//           )}\r\n//           {error && <ErrorMessage message={error} />}\r\n//         </Box>\r\n//         {selectedId && (\r\n//           <BookOverlay\r\n//             selectedId={selectedId}\r\n//             onCloseBook={handleCloseBook}\r\n//             onAddRead={handleAddRead}\r\n//             read={read}\r\n//           />\r\n//         )}\r\n//       </Main>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// function NumResults({ books }) {\r\n//   return (\r\n//     <p className=\"mb-4 text-lg\">\r\n//       Found <strong>{books.length}</strong> results\r\n//     </p>\r\n//   );\r\n// }\r\n\r\n// function Main({ children }) {\r\n//   return <main className=\"bg-white p-4 rounded shadow-lg\">{children}</main>;\r\n// }\r\n\r\n// function Box({ children }) {\r\n//   const [isOpen, setIsOpen] = useState(true);\r\n\r\n//   return (\r\n//     <div className=\"mb-4\">\r\n//       <button\r\n//         className=\"mb-2 text-xl text-blue-600 focus:outline-none\"\r\n//         onClick={() => setIsOpen((open) => !open)}\r\n//       >\r\n//         {isOpen ? \"–\" : \"+\"}\r\n//       </button>\r\n//       {isOpen && children}\r\n//     </div>\r\n//   );\r\n// }\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}